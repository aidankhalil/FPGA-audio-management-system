;================================================================
; Port address definitions...
;================================================================

CONSTANT up_button        , 00    ; up INPUT
CONSTANT down_button	  , 01    ; down INPUT
CONSTANT uart_data_rx     , 02    ; UART receive read port
CONSTANT uart_data_tx     , 03    ; UART transmit write port
CONSTANT data_present     , 04    ; UART stat read port, lsb
CONSTANT buffer_full      , 05    ; UART stat read port, lsb
CONSTANT select_button    , 06    ; Select Button INPUT
CONSTANT memory_full      , 07    ; MEMORY_FULL INPUT
CONSTANT FSM              , 08    ; Controls FSM in FPGA
CONSTANT mem_wipe         , 09    ; Confirmation that mem is wiped
CONSTANT skip_ack         , 0A    ; skip ack
CONSTANT welcome          , 0B    ; welcome continue

;================================================================
; Useful constant declarations...
;================================================================

CONSTANT all_clear        , 00    ; define all clear
CONSTANT all_set          , FF    ; define all set

CONSTANT ascii_NUL        , 00    ; ascii code (null character)
CONSTANT ascii_SOH        , 01    ; ascii code (start of header)
CONSTANT ascii_STX        , 02    ; ascii code (start of text)
CONSTANT ascii_ETX        , 03    ; ascii code (end of text)
CONSTANT ascii_EOT        , 04    ; ascii code (end of xmit)
CONSTANT ascii_ENQ        , 05    ; ascii code (enquiry)
CONSTANT ascii_ACK        , 06    ; ascii code (acknowledge)
CONSTANT ascii_BEL        , 07    ; ascii code (bell)
CONSTANT ascii_BS         , 08    ; ascii code (backspace)
CONSTANT ascii_HT         , 09    ; ascii code (horiz tab)
CONSTANT ascii_LF         , 0A    ; ascii code (line feed)
CONSTANT ascii_VT         , 0B    ; ascii code (vert tab)
CONSTANT ascii_FF         , 0C    ; ascii code (form feed)
CONSTANT ascii_CR         , 0D    ; ascii code (carriage return)
CONSTANT ascii_SO         , 0E    ; ascii code (shift out)
CONSTANT ascii_SI         , 0F    ; ascii code (shift in)

CONSTANT ascii_DLE        , 10    ; ascii code (data link esc)
CONSTANT ascii_DC1        , 11    ; ascii code (device ctrl 1, xon)
CONSTANT ascii_DC2        , 12    ; ascii code (device ctrl 2)
CONSTANT ascii_DC3        , 13    ; ascii code (device ctrl 3, xoff)
CONSTANT ascii_DC4        , 14    ; ascii code (device ctrl 4)
CONSTANT ascii_NAK        , 15    ; ascii code (negative acknowledge)
CONSTANT ascii_SYN        , 16    ; ascii code (sync idle)
CONSTANT ascii_ETB        , 17    ; ascii code (end xmit block)
CONSTANT ascii_CAN        , 18    ; ascii code (cancel)
CONSTANT ascii_EM         , 19    ; ascii code (end of medium)
CONSTANT ascii_SUB        , 1A    ; ascii code (substitute)
CONSTANT ascii_ESC        , 1B    ; ascii code (escape)
CONSTANT ascii_FS         , 1C    ; ascii code (file separator)
CONSTANT ascii_GS         , 1D    ; ascii code (group separator)
CONSTANT ascii_RS         , 1E    ; ascii code (record separator)
CONSTANT ascii_US         , 1F    ; ascii code (unit space)

CONSTANT ascii_SPACE      , 20    ; ascii code
CONSTANT ascii_EXCLAIM    , 21    ; ascii code
CONSTANT ascii_DBLQUOT    , 22    ; ascii code
CONSTANT ascii_NUMSIGN    , 23    ; ascii code
CONSTANT ascii_DOLLAR     , 24    ; ascii code
CONSTANT ascii_PERCENT    , 25    ; ascii code
CONSTANT ascii_AMP        , 26    ; ascii code
CONSTANT ascii_SINQUOT    , 27    ; ascii code
CONSTANT ascii_LPAREN     , 28    ; ascii code
CONSTANT ascii_RPAREN     , 29    ; ascii code
CONSTANT ascii_ASTERISK   , 2A    ; ascii code
CONSTANT ascii_PLUS       , 2B    ; ascii code
CONSTANT ascii_COMMA      , 2C    ; ascii code
CONSTANT ascii_MINUS      , 2D    ; ascii code
CONSTANT ascii_PERIOD     , 2E    ; ascii code
CONSTANT ascii_FWDSLASH   , 2F    ; ascii code

CONSTANT ascii_0          , 30    ; ascii code
CONSTANT ascii_1          , 31    ; ascii code
CONSTANT ascii_2          , 32    ; ascii code
CONSTANT ascii_3          , 33    ; ascii code
CONSTANT ascii_4          , 34    ; ascii code
CONSTANT ascii_5          , 35    ; ascii code
CONSTANT ascii_6          , 36    ; ascii code
CONSTANT ascii_7          , 37    ; ascii code
CONSTANT ascii_8          , 38    ; ascii code
CONSTANT ascii_9          , 39    ; ascii code
CONSTANT ascii_COLON      , 3A    ; ascii code
CONSTANT ascii_SEMI       , 3B    ; ascii code
CONSTANT ascii_LESS       , 3C    ; ascii code
CONSTANT ascii_EQUAL      , 3D    ; ascii code
CONSTANT ascii_GREATER    , 3E    ; ascii code
CONSTANT ascii_QUESTION   , 3F    ; ascii code

CONSTANT ascii_CIRCAT     , 40    ; ascii code
CONSTANT ascii_A          , 41    ; ascii code
CONSTANT ascii_B          , 42    ; ascii code
CONSTANT ascii_C          , 43    ; ascii code
CONSTANT ascii_D          , 44    ; ascii code
CONSTANT ascii_E          , 45    ; ascii code
CONSTANT ascii_F          , 46    ; ascii code
CONSTANT ascii_G          , 47    ; ascii code
CONSTANT ascii_H          , 48    ; ascii code
CONSTANT ascii_I          , 49    ; ascii code
CONSTANT ascii_J          , 4A    ; ascii code
CONSTANT ascii_K          , 4B    ; ascii code
CONSTANT ascii_L          , 4C    ; ascii code
CONSTANT ascii_M          , 4D    ; ascii code
CONSTANT ascii_N          , 4E    ; ascii code
CONSTANT ascii_O          , 4F    ; ascii code

CONSTANT ascii_P          , 50    ; ascii code
CONSTANT ascii_Q          , 51    ; ascii code
CONSTANT ascii_R          , 52    ; ascii code
CONSTANT ascii_S          , 53    ; ascii code
CONSTANT ascii_T          , 54    ; ascii code
CONSTANT ascii_U          , 55    ; ascii code
CONSTANT ascii_V          , 56    ; ascii code
CONSTANT ascii_W          , 57    ; ascii code
CONSTANT ascii_X          , 58    ; ascii code
CONSTANT ascii_Y          , 59    ; ascii code
CONSTANT ascii_Z          , 5A    ; ascii code
CONSTANT ascii_LBKT       , 5B    ; ascii code
CONSTANT ascii_BKSLASH    , 5C    ; ascii code
CONSTANT ascii_RBKT       , 5D    ; ascii code
CONSTANT ascii_CARET      , 5E    ; ascii code
CONSTANT ascii_UNDER      , 5F    ; ascii code

CONSTANT ascii_TICK       , 60    ; ascii code
CONSTANT ascii_a          , 61    ; ascii code
CONSTANT ascii_b          , 62    ; ascii code
CONSTANT ascii_c          , 63    ; ascii code
CONSTANT ascii_d          , 64    ; ascii code
CONSTANT ascii_e          , 65    ; ascii code
CONSTANT ascii_f          , 66    ; ascii code
CONSTANT ascii_g          , 67    ; ascii code
CONSTANT ascii_h          , 68    ; ascii code
CONSTANT ascii_i          , 69    ; ascii code
CONSTANT ascii_j          , 6A    ; ascii code
CONSTANT ascii_k          , 6B    ; ascii code
CONSTANT ascii_l          , 6C    ; ascii code
CONSTANT ascii_m          , 6D    ; ascii code
CONSTANT ascii_n          , 6E    ; ascii code
CONSTANT ascii_o          , 6F    ; ascii code

CONSTANT ascii_p          , 70    ; ascii code
CONSTANT ascii_q          , 71    ; ascii code
CONSTANT ascii_r          , 72    ; ascii code
CONSTANT ascii_s          , 73    ; ascii code
CONSTANT ascii_t          , 74    ; ascii code
CONSTANT ascii_u          , 75    ; ascii code
CONSTANT ascii_v          , 76    ; ascii code
CONSTANT ascii_w          , 77    ; ascii code
CONSTANT ascii_x          , 78    ; ascii code
CONSTANT ascii_y          , 79    ; ascii code
CONSTANT ascii_z          , 7A    ; ascii code
CONSTANT ascii_LBRACE     , 7B    ; ascii code
CONSTANT ascii_VBAR       , 7C    ; ascii code
CONSTANT ascii_RBRACE     , 7D    ; ascii code
CONSTANT ascii_TILDE      , 7E    ; ascii code
CONSTANT ascii_DEL        , 7F    ; ascii code

;================================================================
; Actual assembly program goes here...
;
; NOTE: size limit is 4096 lines of actual assembly code
;       Old documentation says it is 1024. This is now incorrect.
;================================================================
	
	 load sE, ascii_BS
	 store sE, 20
     load     s0, s0

cold_start:
  	 load s0, ascii_FF 	;For all print messages, put the characters required by the message, then
     store s0, 00		;add ETX until we have a total of 17 entries. All lines are 17 chars long
     load s0, ascii_S		;which helps for consistency in printing.
     store s0, 01
     load s0, ascii_t
     store s0, 02
     load s0, ascii_a
     store s0, 03
     load s0, ascii_r
     store s0, 04
     load s0, ascii_t
     store s0, 05
     load s0, ascii_u
     store s0, 06
     load s0, ascii_p
     store s0, 07
     load s0, ascii_SPACE
     store s0, 08
     load s0, ascii_C
     store s0, 09
     load s0, ascii_o
     store s0, 0A
     load s0, ascii_m
     store s0, 0B
     load s0, ascii_p
     store s0, 0C
     load s0, ascii_l
     store s0, 0D
     load s0, ascii_e
     store s0, 0E
     load s0, ascii_t
     store s0, 0F
     load s0, ascii_e
     store s0, 10
     load s0, ascii_ETX
     store s0, 11
     load s0, ascii_ETX
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 80
     jump begin_print


pre_alt_start: ;80
	 input s7, welcome
	 compare s7, 01
	 jump nz, pre_alt_start
     jump first_menu

;50
first_menu:
  	 load s0, ascii_FF
     store s0, 00
alt_first_menu:
     load s0, ascii_1
     store s0, 01
     load s0, ascii_RPAREN
     store s0, 02
     load s0, ascii_SPACE
     store s0, 03
     load s0, ascii_P
     store s0, 04
     load s0, ascii_l
     store s0, 05
     load s0, ascii_a
     store s0, 06
     load s0, ascii_y
     store s0, 07
     load s0, ascii_SPACE
     store s0, 08
     load s0, ascii_M
     store s0, 09
     load s0, ascii_e
     store s0, 0A
     load s0, ascii_s
     store s0, 0B
     load s0, ascii_s
     store s0, 0C
     load s0, ascii_a
     store s0, 0D
     load s0, ascii_g
     store s0, 0E
     load s0, ascii_e
     store s0, 0F
     load s0, ascii_ETX
     store s0, 10
     load s0, ascii_ETX
     store s0, 11
     load s0, ascii_ETX
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 51
     jump begin_print


;51
second_menu:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_2
     store s0, 02
     load s0, ascii_RPAREN
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_R
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_c
     store s0, 07
     load s0, ascii_o
     store s0, 08
     load s0, ascii_r
     store s0, 09
     load s0, ascii_d
     store s0, 0A
     load s0, ascii_SPACE
     store s0, 0B
     load s0, ascii_M
     store s0, 0C
     load s0, ascii_e
     store s0, 0D
     load s0, ascii_s
     store s0, 0E
     load s0, ascii_s
     store s0, 0F
     load s0, ascii_a
     store s0, 10
     load s0, ascii_g
     store s0, 11
     load s0, ascii_e
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 52
     jump begin_print


;52
third_menu:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_3
     store s0, 02
     load s0, ascii_RPAREN
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_D
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_l
     store s0, 07
     load s0, ascii_e
     store s0, 08
     load s0, ascii_t
     store s0, 09
     load s0, ascii_e
     store s0, 0A
     load s0, ascii_SPACE
     store s0, 0B
     load s0, ascii_M
     store s0, 0C
     load s0, ascii_e
     store s0, 0D
     load s0, ascii_s
     store s0, 0E
     load s0, ascii_s
     store s0, 0F
     load s0, ascii_a
     store s0, 10
     load s0, ascii_g
     store s0, 11
     load s0, ascii_e
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 53
     jump begin_print


;53
fourth_menu:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_4
     store s0, 02
     load s0, ascii_RPAREN
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_D
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_l
     store s0, 07
     load s0, ascii_e
     store s0, 08
     load s0, ascii_t
     store s0, 09
     load s0, ascii_e
     store s0, 0A
     load s0, ascii_SPACE
     store s0, 0B
     load s0, ascii_a
     store s0, 0C
     load s0, ascii_l
     store s0, 0D
     load s0, ascii_l
     store s0, 0E
     load s0, ascii_SPACE
     store s0, 0F
     load s0, ascii_m
     store s0, 10
     load s0, ascii_e
     store s0, 11
     load s0, ascii_s
     store s0, 12
     load s0, ascii_s
     store s0, 13
     load s0, ascii_a
     store s0, 14
     load s0, ascii_g
     store s0, 15
     load s0, ascii_e
     store s0, 16
     load s0, ascii_s
     store s0, 17
     load sD, 54
     jump begin_print



;54
fifth_menu:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_5
     store s0, 02
     load s0, ascii_RPAREN
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_C
     store s0, 05
     load s0, ascii_h
     store s0, 06
     load s0, ascii_a
     store s0, 07
     load s0, ascii_n
     store s0, 08
     load s0, ascii_g
     store s0, 09
     load s0, ascii_e
     store s0, 0A
     load s0, ascii_SPACE
     store s0, 0B
     load s0, ascii_V
     store s0, 0C
     load s0, ascii_o
     store s0, 0D
     load s0, ascii_l
     store s0, 0E
     load s0, ascii_u
     store s0, 0F
     load s0, ascii_m
     store s0, 10
     load s0, ascii_e
     store s0, 11
     load s0, ascii_CR
     store s0, 12
     load s0, ascii_LF
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 55
     jump begin_print



;55
select_line_main_menu:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_S
     store s0, 02
     load s0, ascii_e
     store s0, 03
     load s0, ascii_l
     store s0, 04
     load s0, ascii_e
     store s0, 05
     load s0, ascii_c
     store s0, 06
     load s0, ascii_t
     store s0, 07
     load s0, ascii_SPACE
     store s0, 08
     load s0, ascii_a
     store s0, 09
     load s0, ascii_n
     store s0, 0A
     load s0, ascii_SPACE
     store s0, 0B
     load s0, ascii_O
     store s0, 0C
     load s0, ascii_p
     store s0, 0D
     load s0, ascii_t
     store s0, 0E
     load s0, ascii_i
     store s0, 0F
     load s0, ascii_o
     store s0, 10
     load s0, ascii_n
     store s0, 11
     load s0, ascii_COLON
     store s0, 12
     load s0, ascii_SPACE
     store s0, 13
     load s4, ascii_1
     store s4, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 56 ;selection_main_menu
     jump begin_print

;----------------------------------------------------------------------
;SELECTION BIT UTILITIES
begin_main_menu:
	  load sF, sF
	  input s6, select_button
	  compare s6, 01
	  jump z, begin_main_menu
	
selection_main_menu:
	  load sF, sF
	  input s2, up_button
	  input s5, down_button
	  input s6, select_button
	  compare s2, 01
	  jump z, go_up_main_menu
	  compare s5, 01
	  jump z, go_down_main_menu
	  compare s6, 01
	  jump z, option_select_main_menu
	  jump selection_main_menu
	
 go_up_main_menu:
	 load sF, sF
	 fetch sE, 20
 	 output sE, uart_data_tx
 	 add s4, 01
 	 compare s4, 36
 	 jump z, fix_high_main_menu
 	 output s4, uart_data_tx
 	 load s2, 00
 	 jump waste_time_main_menu
 	
 go_down_main_menu:
	 load sF, sF
	 fetch sE, 20
	 output sE, uart_data_tx
	 sub s4, 01
	 compare s4, 30
	 jump z, fix_low_main_menu
	 output s4, uart_data_tx
	 load s5, 00
	 jump waste_time_main_menu
 	
fix_high_main_menu:
     load sF, sF
	 sub s4, 01
	 output s4, uart_data_tx
	 jump waste_time_main_menu

fix_low_main_menu:
    load sF, sF
	add s4, 01
	output s4, uart_data_tx
	jump waste_time_main_menu

option_select_main_menu:
	load sF, sF
	compare s4, 31
	jump z, play_first_line
	compare s4, 32
	jump z, mem_check
	compare s4, 33
	jump z, delete_first_line
	compare s4, 34
	jump z, preconfirmation
	compare s4, 35
	jump z, volume_control
	jump waste_time_main_menu

preconfirmation:
	load sA, 04
	output sA, FSM
	jump confirmation
confirmation:
	load sF, sF
	input sB, mem_wipe
	compare sB, 01
	jump z, delete_all_first_line
	jump confirmation

mem_check:
	load sF, sF
	input s9, memory_full
	compare s9, 01
	jump z, mem_full_line_p1
	jump record_first_line
	
waste_time_main_menu:
	load sF, sF
	input s2, up_button
	compare s2, 01
	jump z, waste_time_main_menu
	input s5, down_button
	compare s5, 01
	jump z, waste_time_main_menu
	jump selection_main_menu
;END OF UTILITIES MAIN MENU
;----------------------------------------------------------------------

mem_full_line_p1:
	 load s0, ascii_FF
     store s0, 00
     load s0, ascii_M
     store s0, 01
     load s0, ascii_e
     store s0, 02
     load s0, ascii_m
     store s0, 03
     load s0, ascii_o
     store s0, 04
     load s0, ascii_r
     store s0, 05
     load s0, ascii_y
     store s0, 06
     load s0, ascii_SPACE
     store s0, 07
     load s0, ascii_F
     store s0, 08
     load s0, ascii_u
     store s0, 09
     load s0, ascii_l
     store s0, 0A
     load s0, ascii_l
     store s0, 0B
     load s0, ascii_CR
     store s0, 0C
     load s0, ascii_LF
     store s0, 0D
     load s0, ascii_LF
     store s0, 0E
     load s0, ascii_1
     store s0, 0F
     load s0, ascii_RPAREN
     store s0, 10
     load s0, ascii_SPACE
     store s0, 11
     load s0, ascii_D
     store s0, 12
     load s0, ascii_o
     store s0, 13
     load s0, ascii_n
     store s0, 14
     load s0, ascii_e
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 82
     jump begin_print

mem_full_line_p2:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_S
     store s0, 03
     load s0, ascii_e
     store s0, 04
     load s0, ascii_l
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_c
     store s0, 07
     load s0, ascii_t
     store s0, 08
     load s0, ascii_SPACE
     store s0, 09
     load s0, ascii_a
     store s0, 0A
     load s0, ascii_n
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_O
     store s0, 0D
     load s0, ascii_p
     store s0, 0E
     load s0, ascii_t
     store s0, 0F
     load s0, ascii_i
     store s0, 10
     load s0, ascii_o
     store s0, 11
     load s0, ascii_n
     store s0, 12
     load s0, ascii_COLON
     store s0, 13
     load s0, ascii_SPACE
     store s0, 14
     load s4, ascii_1
     store s4, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 83 ;selection_mem_full
     jump begin_print

;----------------------------------------------------------------------
;SELECTION BIT UTILITIES MEMORY FULL
begin_mem_full:
	  load sF, sF
	  input s6, select_button
	  compare s6, 01
	  jump z, begin_mem_full
	
selection_mem_full:
	  load sF, sF
	  input s2, up_button
	  input s5, down_button
	  input s6, select_button
	  compare s2, 01
	  jump z, go_up_mem_full
	  compare s5, 01
	  jump z, go_down_mem_full
	  compare s6, 01
	  jump z, option_select_mem_full
	  jump selection_mem_full
	
 go_up_mem_full:
	 load sF, sF
	 fetch sE, 20
 	 output sE, uart_data_tx
 	 add s4, 01
 	 compare s4, 32
 	 jump z, fix_high_mem_full
 	 output s4, uart_data_tx
 	 load s2, 00
 	 jump waste_time_mem_full
 	
 go_down_mem_full:
	 load sF, sF
	 fetch sE, 20
	 output sE, uart_data_tx
	 sub s4, 01
	 compare s4, 30
	 jump z, fix_low_mem_full
	 output s4, uart_data_tx
	 load s5, 00
	 jump waste_time_mem_full
 	
fix_high_mem_full:
     load sF, sF
	 sub s4, 01
	 output s4, uart_data_tx
	 jump waste_time_mem_full

fix_low_mem_full:
    load sF, sF
	add s4, 01
	output s4, uart_data_tx
	jump waste_time_mem_full

option_select_mem_full:
	load sF, sF
	compare s4, 31
	jump z, first_menu

waste_time_mem_full:
	load sF, sF
	input s2, up_button
	compare s2, 01
	jump z, waste_time_mem_full
	input s5, down_button
	compare s5, 01
	jump z, waste_time_mem_full
	jump selection_mem_full
;END OF UTILITIES MEMORY FULL
;----------------------------------------------------------------------

volume_control:
     load s0, ascii_FF
     store s0, 00
     load s0, ascii_1
     store s0, 01
     load s0, ascii_RPAREN
     store s0, 02
     load s0, ascii_SPACE
     store s0, 03
     load s0, ascii_H
     store s0, 04
     load s0, ascii_i
     store s0, 05
     load s0, ascii_g
     store s0, 06
     load s0, ascii_h
     store s0, 07
     load s0, ascii_CR
     store s0, 08
     load s0, ascii_LF
     store s0, 09
     load s0, ascii_2
     store s0, 0A
     load s0, ascii_RPAREN
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_M
     store s0, 0D
     load s0, ascii_e
     store s0, 0E
     load s0, ascii_d
     store s0, 0F
     load s0, ascii_CR
     store s0, 10
     load s0, ascii_LF
     store s0, 11
     load s0, ascii_3
     store s0, 12
     load s0, ascii_RPAREN
     store s0, 13
     load s4, ascii_SPACE
     store s4, 14
     load s0, ascii_L
     store s0, 15
     load s0, ascii_o
     store s0, 16
     load s0, ascii_w
     store s0, 17
     load sD, 58
     jump begin_print

;58
select_line_volume_control:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_S
     store s0, 03
     load s0, ascii_e
     store s0, 04
     load s0, ascii_l
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_c
     store s0, 07
     load s0, ascii_t
     store s0, 08
     load s0, ascii_SPACE
     store s0, 09
     load s0, ascii_a
     store s0, 0A
     load s0, ascii_n
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_O
     store s0, 0D
     load s0, ascii_p
     store s0, 0E
     load s0, ascii_t
     store s0, 0F
     load s0, ascii_i
     store s0, 10
     load s0, ascii_o
     store s0, 11
     load s0, ascii_n
     store s0, 12
     load s0, ascii_COLON
     store s0, 13
     load s0, ascii_SPACE
     store s0, 14
     load s4, ascii_1
     store s4, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 59 ;begin_volume_control
     jump begin_print

;----------------------------------------------------------------------
;SELCTION BIT UTILITIES VOLUME CONTROL
begin_volume_control:
	  load sA, 12
	  output sA, FSM
	  load sF, sF
	  input s6, select_button
	  compare s6, 01
	  jump z, begin_volume_control
	  jump selection_volume_control
	
selection_volume_control:
	  load sF, sF
	  input s2, up_button
	  input s5, down_button
	  input s6, select_button
	  compare s2, 01
	  jump z, go_up_volume_control
	  compare s5, 01
	  jump z, go_down_volume_control
	  compare s6, 01
	  jump z, option_select_volume_control
	  jump selection_volume_control
	
 go_up_volume_control:
	 load sF, sF
	 fetch sE, 20
 	 output sE, uart_data_tx
 	 add s4, 01
 	 compare s4, 34
 	 jump z, fix_high_volume_control
 	 output s4, uart_data_tx
 	 load s2, 00
 	 jump waste_time_volume_control
 	
 go_down_volume_control:
	 load sF, sF
	 fetch sE, 20
	 output sE, uart_data_tx
	 sub s4, 01
	 compare s4, 30
	 jump z, fix_low_volume_control
	 output s4, uart_data_tx
	 load s5, 00
	 jump waste_time_volume_control
 	
fix_high_volume_control:
     load sF, sF
	 sub s4, 01
	 output s4, uart_data_tx
	 jump waste_time_volume_control

fix_low_volume_control:
    load sF, sF
	add s4, 01
	output s4, uart_data_tx
	jump waste_time_volume_control

option_select_volume_control:
	load sF, sF
	compare s4, 31
	jump z, high_V
	compare s4, 32
	jump z, med_V
	compare s4, 33
	jump z, low_V
	
high_V:
   load sA, 13
   output sA, FSM
   jump first_menu

med_V:
   load sA, 14
   output sA, FSM
   jump first_menu

low_V:
   load sA, 15
   output sA, FSM
   jump first_menu

waste_time_volume_control:
	load sF, sF
	input s2, up_button
	compare s2, 01
	jump z, waste_time_volume_control
	input s5, down_button
	compare s5, 01
	jump z, waste_time_volume_control
	jump selection_volume_control
;END OF UTILITIES VOLUME CONTROL
;----------------------------------------------------------------------

play_first_line:
     load s0, ascii_FF
     store s0, 00
     load s0, ascii_P
     store s0, 01
     load s0, ascii_l
     store s0, 02
     load s0, ascii_a
     store s0, 03
     load s0, ascii_y
     store s0, 04
     load s0, ascii_SPACE
     store s0, 05
     load s0, ascii_W
     store s0, 06
     load s0, ascii_h
     store s0, 07
     load s0, ascii_i
     store s0, 08
     load s0, ascii_c
     store s0, 09
     load s0, ascii_h
     store s0, 0A
     load s0, ascii_SPACE
     store s0, 0B
     load s0, ascii_T
     store s0, 0C
     load s0, ascii_r
     store s0, 0D
     load s0, ascii_a
     store s0, 0E
     load s0, ascii_c
     store s0, 0F
     load s0, ascii_k
     store s0, 10
     load s0, ascii_COLON
     store s0, 11
     load s0, ascii_CR
     store s0, 12
     load s0, ascii_LF
     store s0, 13
     load s0, ascii_LF
     store s0, 14
     load s0, ascii_1
     store s0, 15
     load s0, ascii_RPAREN
     store s0, 16
     load s0, ascii_SPACE
     store s0, 17
     load sD, 5B
     jump begin_print

play_track12_line:
     load s0, ascii_T
     store s0, 00
     load s0, ascii_r
     store s0, 01
     load s0, ascii_a
     store s0, 02
     load s0, ascii_c
     store s0, 03
     load s0, ascii_k
     store s0, 04
     load s0, ascii_SPACE
     store s0, 05
     load s0, ascii_1
     store s0, 06
     load s0, ascii_CR
     store s0, 07
     load s0, ascii_LF
     store s0, 08
     load s0, ascii_2
     store s0, 09
     load s0, ascii_RPAREN
     store s0, 0A
     load s0, ascii_SPACE
     store s0, 0B
     load s0, ascii_T
     store s0, 0C
     load s0, ascii_r
     store s0, 0D
     load s0, ascii_a
     store s0, 0E
     load s0, ascii_c
     store s0, 0F
     load s0, ascii_k
     store s0, 10
     load s0, ascii_SPACE
     store s0, 11
     load s0, ascii_2
     store s0, 12
     load s0, ascii_CR
     store s0, 13
     load s0, ascii_LF
     store s0, 14
     load s0, ascii_3
     store s0, 15
     load s0, ascii_RPAREN
     store s0, 16
     load s0, ascii_SPACE
     store s0, 17
     load sD, 5C
     jump begin_print

play_track34_line:
     load s0, ascii_T
     store s0, 00
     load s0, ascii_r
     store s0, 01
     load s0, ascii_a
     store s0, 02
     load s0, ascii_c
     store s0, 03
     load s0, ascii_k
     store s0, 04
     load s0, ascii_SPACE
     store s0, 05
     load s0, ascii_3
     store s0, 06
     load s0, ascii_CR
     store s0, 07
     load s0, ascii_LF
     store s0, 08
     load s0, ascii_4
     store s0, 09
     load s0, ascii_RPAREN
     store s0, 0A
     load s0, ascii_SPACE
     store s0, 0B
     load s0, ascii_T
     store s0, 0C
     load s0, ascii_r
     store s0, 0D
     load s0, ascii_a
     store s0, 0E
     load s0, ascii_c
     store s0, 0F
     load s0, ascii_k
     store s0, 10
     load s0, ascii_SPACE
     store s0, 11
     load s0, ascii_4
     store s0, 12
     load s0, ascii_CR
     store s0, 13
     load s0, ascii_LF
     store s0, 14
     load s0, ascii_5
     store s0, 15
     load s0, ascii_RPAREN
     store s0, 16
     load s0, ascii_SPACE
     store s0, 17
     load sD, 5D
     jump begin_print

play_track5_line:
     load s0, ascii_T
     store s0, 00
     load s0, ascii_r
     store s0, 01
     load s0, ascii_a
     store s0, 02
     load s0, ascii_c
     store s0, 03
     load s0, ascii_k
     store s0, 04
     load s0, ascii_SPACE
     store s0, 05
     load s0, ascii_5
     store s0, 06
     load s0, ascii_CR
     store s0, 07
     load s0, ascii_LF
     store s0, 08
     load s0, ascii_6
     store s0, 09
     load s0, ascii_RPAREN
     store s0, 0A
     load s0, ascii_SPACE
     store s0, 0B
     load s0, ascii_G
     store s0, 0C
     load s0, ascii_o
     store s0, 0D
     load s0, ascii_SPACE
     store s0, 0E
     load s0, ascii_B
     store s0, 0F
     load s0, ascii_a
     store s0, 10
     load s0, ascii_c
     store s0, 11
     load s0, ascii_k
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 5F
     jump begin_print

select_line_play:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_S
     store s0, 03
     load s0, ascii_e
     store s0, 04
     load s0, ascii_l
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_c
     store s0, 07
     load s0, ascii_t
     store s0, 08
     load s0, ascii_SPACE
     store s0, 09
     load s0, ascii_a
     store s0, 0A
     load s0, ascii_n
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_O
     store s0, 0D
     load s0, ascii_p
     store s0, 0E
     load s0, ascii_t
     store s0, 0F
     load s0, ascii_i
     store s0, 10
     load s0, ascii_o
     store s0, 11
     load s0, ascii_n
     store s0, 12
     load s0, ascii_COLON
     store s0, 13
     load s0, ascii_SPACE
     store s0, 14
     load s4, ascii_1
     store s4, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 60 ;begin_play
     jump begin_print

;----------------------------------------------------------------------
;SELCTION BIT UTILITIES PLAY
begin_play:
	  load sF, sF
	  input s6, select_button
	  compare s6, 01
	  jump z, begin_play
	  jump selection_play
	
selection_play:
	  load sF, sF
	  input s2, up_button
	  input s5, down_button
	  input s6, select_button
	  compare s2, 01
	  jump z, go_up_play
	  compare s5, 01
	  jump z, go_down_play
	  compare s6, 01
	  jump z, option_select_play
	  jump selection_play
	
 go_up_play:
	 load sF, sF
	 fetch sE, 20
 	 output sE, uart_data_tx
 	 add s4, 01
 	 compare s4, 37
 	 jump z, fix_high_play
 	 output s4, uart_data_tx
 	 load s2, 00
 	 jump waste_time_play
 	
 go_down_play:
	 load sF, sF
	 fetch sE, 20
	 output sE, uart_data_tx
	 sub s4, 01
	 compare s4, 30
	 jump z, fix_low_play
	 output s4, uart_data_tx
	 load s5, 00
	 jump waste_time_play
 	
fix_high_play:
     load sF, sF
	 sub s4, 01
	 output s4, uart_data_tx
	 jump waste_time_play

fix_low_play:
    load sF, sF
	add s4, 01
	output s4, uart_data_tx
	jump waste_time_play

option_select_play:
	load sF, sF
	load s8, 31
	compare s4, 31
	jump z, play_track1
	load s8, 32
	compare s4, 32
	jump z, play_track2
	load s8, 33
	compare s4, 33
	jump z, play_track3
	load s8, 34
	compare s4, 34
	jump z, play_track4
	load s8, 35
	compare s4, 35
	jump z, play_track5
	compare s4, 36
	jump z, play_back_to_main

play_back_to_main:
	jump first_menu
	
play_track1:
	load sC, 01
	jump curr_track_line_p1
	
play_track2:
    load sC, 02
	jump curr_track_line_p1
	
play_track3:
    load sC, 03
	jump curr_track_line_p1
	
play_track4:
    load sC, 04
	jump curr_track_line_p1
	
play_track5:
    load sC, 05
	jump curr_track_line_p1

waste_time_play:
	load sF, sF
	input s2, up_button
	compare s2, 01
	jump z, waste_time_play
	input s5, down_button
	compare s5, 01
	jump z, waste_time_play
	jump selection_play
;END OF UTILITIES PLAY
;----------------------------------------------------------------------

curr_track_line_p1:
     load s0, ascii_FF
     store s0, 00
     load s0, ascii_T
     store s0, 01
     load s0, ascii_r
     store s0, 02
     load s0, ascii_a
     store s0, 03
     load s0, ascii_c
     store s0, 04
     load s0, ascii_k
     store s0, 05
     load s0, ascii_SPACE
     store s0, 06
     load s0, s8 ;CURRENT TRACK NUM
     store s0, 07
     load s0, ascii_COLON
     store s0, 08
     load s0, ascii_ETX
     store s0, 09
     load s0, ascii_ETX
     store s0, 0A
     load s0, ascii_ETX
     store s0, 0B
     load s0, ascii_ETX
     store s0, 0C
     load s0, ascii_ETX
     store s0, 0D
     load s0, ascii_ETX
     store s0, 0E
     load s0, ascii_ETX
     store s0, 0F
     load s0, ascii_ETX
     store s0, 10
     load s0, ascii_ETX
     store s0, 11
     load s0, ascii_ETX
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_CR
     store s0, 14
     load s0, ascii_LF
     store s0, 15
     load s0, ascii_LF
     store s0, 16
     load s0, ascii_1
     store s0, 17
     load sD, 78
     jump begin_print

curr_track_line_p2:
     load s0, ascii_RPAREN
     store s0, 00
     load s0, ascii_SPACE
     store s0, 01
     load s0, ascii_P
     store s0, 02
     load s0, ascii_l
     store s0, 03
     load s0, ascii_a
     store s0, 04
     load s0, ascii_y
     store s0, 05
     load s0, ascii_ETX
     store s0, 06
     load s0, ascii_ETX
     store s0, 07
     load s0, ascii_CR
     store s0, 08
     load s0, ascii_LF
     store s0, 09
     load s0, ascii_2
     store s0, 0A
     load s0, ascii_RPAREN
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_P
     store s0, 0D
     load s0, ascii_a
     store s0, 0E
     load s0, ascii_u
     store s0, 0F
     load s0, ascii_s
     store s0, 10
     load s0, ascii_e
     store s0, 11
     load s0, ascii_CR
     store s0, 12
     load s0, ascii_LF
     store s0, 13
     load s0, ascii_3
     store s0, 14
     load s0, ascii_RPAREN
     store s0, 15
     load s0, ascii_SPACE
     store s0, 16
     load s0, ascii_S
     store s0, 17
     load sD, 79
     jump begin_print

curr_track_line_p3:
     load s0, ascii_k
     store s0, 00
     load s0, ascii_i
     store s0, 01
     load s0, ascii_p
     store s0, 02
     load s0, ascii_CR
     store s0, 03
     load s0, ascii_LF
     store s0, 04
     load s0, ascii_4
     store s0, 05
     load s0, ascii_RPAREN
     store s0, 06
     load s0, ascii_SPACE
     store s0, 07
     load s0, ascii_G
     store s0, 08
     load s0, ascii_o
     store s0, 09
     load s0, ascii_SPACE
     store s0, 0A
     load s0, ascii_B
     store s0, 0B
     load s0, ascii_a
     store s0, 0C
     load s0, ascii_c
     store s0, 0D
     load s0, ascii_k
     store s0, 0E
     load s0, ascii_ETX
     store s0, 0F
     load s0, ascii_ETX
     store s0, 10
     load s0, ascii_ETX
     store s0, 11
     load s0, ascii_ETX
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 7A
     jump begin_print

curr_track_line_p4:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_S
     store s0, 03
     load s0, ascii_e
     store s0, 04
     load s0, ascii_l
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_c
     store s0, 07
     load s0, ascii_t
     store s0, 08
     load s0, ascii_SPACE
     store s0, 09
     load s0, ascii_a
     store s0, 0A
     load s0, ascii_n
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_O
     store s0, 0D
     load s0, ascii_p
     store s0, 0E
     load s0, ascii_t
     store s0, 0F
     load s0, ascii_i
     store s0, 10
     load s0, ascii_o
     store s0, 11
     load s0, ascii_n
     store s0, 12
     load s0, ascii_COLON
     store s0, 13
     load s0, ascii_SPACE
     store s0, 14
     load s4, ascii_1
     store s4, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 7B ;begin_curr_track
     jump begin_print

;----------------------------------------------------------------------
;SELCTION BIT UTILITIES CURRENT TRACK
begin_curr_track:
	  load sF, sF
	  input s6, select_button
	  compare s6, 01
	  jump z, begin_curr_track
	  jump selection_curr_track
	
selection_curr_track:
	  load sF, sF
	  input s2, up_button
	  input s5, down_button
	  input s6, select_button
	  compare s2, 01
	  jump z, go_up_curr_track
	  compare s5, 01
	  jump z, go_down_curr_track
	  compare s6, 01
	  jump z, option_select_curr_track
	  jump selection_curr_track
	
 go_up_curr_track:
	 load sF, sF
	 fetch sE, 20
 	 output sE, uart_data_tx
 	 add s4, 01
 	 compare s4, 35
 	 jump z, fix_high_curr_track
 	 output s4, uart_data_tx
 	 load s2, 00
 	 jump waste_time_curr_track
 	
 go_down_curr_track:
	 load sF, sF
	 fetch sE, 20
	 output sE, uart_data_tx
	 sub s4, 01
	 compare s4, 30
	 jump z, fix_low_curr_track
	 output s4, uart_data_tx
	 load s5, 00
	 jump waste_time_curr_track
 	
fix_high_curr_track:
     load sF, sF
	 sub s4, 01
	 output s4, uart_data_tx
	 jump waste_time_curr_track

fix_low_curr_track:
    load sF, sF
	add s4, 01
	output s4, uart_data_tx
	jump waste_time_curr_track

option_select_curr_track:
	load sF, sF
	compare s4, 31
	jump z, play_t
	compare s4, 32
	jump z, pause
	compare s4, 33
	jump z, skip
	compare s4, 34
	jump z, goback_play_or_record

goback_play_or_record:
	load sA, FF
	output sA, FSM
	jump play_first_line

play_t:
	load sF, sF
	compare sC, 01
	jump z, play_1
	compare sC, 02
	jump z, play_2
	compare sC, 03
	jump z, play_3
	compare sC, 04
	jump z, play_4
	compare sC, 05
	jump z, play_5

play_1:
	load sA, 00
	output sA, FSM
	jump begin_curr_track
	
play_2:
	load sA, 05
	output sA, FSM
	jump begin_curr_track
	
play_3:
	load sA, 06
	output sA, FSM
	jump begin_curr_track
	
play_4:
	load sA, 07
	output sA, FSM
	jump begin_curr_track
	
play_5:
	load sA, 08
	output sA, FSM
	jump begin_curr_track
	
pause:
	load sA, 03
	output sA, FSM
    jump begin_curr_track

skip:
	load sA, 16
	output sA, FSM
skip_p2:
	load sF, sF
	input s7, skip_ack
	compare s7, 01
	jump nz, skip_p2
	load sA, 17
	output sA, FSM
	add s8, 01
	compare s8, 36
	jump z, loop_back
    jump curr_track_line_p1

loop_back:
	load s8, 31
	jump curr_track_line_p1

waste_time_curr_track:
	load sF, sF
	input s2, up_button
	compare s2, 01
	jump z, waste_time_curr_track
	input s5, down_button
	compare s5, 01
	jump z, waste_time_curr_track
	jump selection_curr_track
;END OF UTILITIES CURRENT TRACK
;----------------------------------------------------------------------

record_first_line:
     load s0, ascii_FF
     store s0, 00
     load s0, ascii_R
     store s0, 01
     load s0, ascii_e
     store s0, 02
     load s0, ascii_c
     store s0, 03
     load s0, ascii_o
     store s0, 04
     load s0, ascii_r
     store s0, 05
     load s0, ascii_d
     store s0, 06
     load s0, ascii_SPACE
     store s0, 07
     load s0, ascii_T
     store s0, 08
     load s0, ascii_o
     store s0, 09
     load s0, ascii_SPACE
     store s0, 0A
     load s0, ascii_W
     store s0, 0B
     load s0, ascii_h
     store s0, 0C
     load s0, ascii_i
     store s0, 0D
     load s0, ascii_c
     store s0, 0E
     load s0, ascii_h
     store s0, 0F
     load s0, ascii_SPACE
     store s0, 10
     load s0, ascii_T
     store s0, 11
     load s0, ascii_r
     store s0, 12
     load s0, ascii_a
     store s0, 13
     load s0, ascii_c
     store s0, 14
     load s0, ascii_k
     store s0, 15
     load s0, ascii_COLON
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 62
     jump begin_print

record_track1_line:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_1
     store s0, 03
     load s0, ascii_RPAREN
     store s0, 04
     load s0, ascii_SPACE
     store s0, 05
     load s0, ascii_T
     store s0, 06
     load s0, ascii_r
     store s0, 07
     load s0, ascii_a
     store s0, 08
     load s0, ascii_c
     store s0, 09
     load s0, ascii_k
     store s0, 0A
     load s0, ascii_SPACE
     store s0, 0B
     load s0, ascii_1
     store s0, 0C
     load s0, ascii_ETX
     store s0, 0D
     load s0, ascii_ETX
     store s0, 0E
     load s0, ascii_ETX
     store s0, 0F
     load s0, ascii_ETX
     store s0, 10
     load s0, ascii_ETX
     store s0, 11
     load s0, ascii_ETX
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 63
     jump begin_print


record_track23_line:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_2
     store s0, 02
     load s0, ascii_RPAREN
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_T
     store s0, 05
     load s0, ascii_r
     store s0, 06
     load s0, ascii_a
     store s0, 07
     load s0, ascii_c
     store s0, 08
     load s0, ascii_k
     store s0, 09
     load s0, ascii_SPACE
     store s0, 0A
     load s0, ascii_2
     store s0, 0B
     load s0, ascii_CR
     store s0, 0C
     load s0, ascii_LF
     store s0, 0D
     load s0, ascii_3
     store s0, 0E
     load s0, ascii_RPAREN
     store s0, 0F
     load s0, ascii_SPACE
     store s0, 10
     load s0, ascii_T
     store s0, 11
     load s0, ascii_r
     store s0, 12
     load s0, ascii_a
     store s0, 13
     load s0, ascii_c
     store s0, 14
     load s0, ascii_k
     store s0, 15
     load s0, ascii_SPACE
     store s0, 16
     load s0, ascii_3
     store s0, 17
     load sD, 64
     jump begin_print

record_track45_line:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_4
     store s0, 02
     load s0, ascii_RPAREN
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_T
     store s0, 05
     load s0, ascii_r
     store s0, 06
     load s0, ascii_a
     store s0, 07
     load s0, ascii_c
     store s0, 08
     load s0, ascii_k
     store s0, 09
     load s0, ascii_SPACE
     store s0, 0A
     load s0, ascii_4
     store s0, 0B
     load s0, ascii_CR
     store s0, 0C
     load s0, ascii_LF
     store s0, 0D
     load s0, ascii_5
     store s0, 0E
     load s0, ascii_RPAREN
     store s0, 0F
     load s0, ascii_SPACE
     store s0, 10
     load s0, ascii_T
     store s0, 11
     load s0, ascii_r
     store s0, 12
     load s0, ascii_a
     store s0, 13
     load s0, ascii_c
     store s0, 14
     load s0, ascii_k
     store s0, 15
     load s0, ascii_SPACE
     store s0, 16
     load s0, ascii_5
     store s0, 17
     load sD, 65
     jump begin_print

record_go_back_line:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_6
     store s0, 02
     load s0, ascii_RPAREN
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_G
     store s0, 05
     load s0, ascii_o
     store s0, 06
     load s0, ascii_SPACE
     store s0, 07
     load s0, ascii_B
     store s0, 08
     load s0, ascii_a
     store s0, 09
     load s0, ascii_c
     store s0, 0A
     load s0, ascii_k
     store s0, 0B
     load s0, ascii_ETX
     store s0, 0C
     load s0, ascii_ETX
     store s0, 0D
     load s0, ascii_ETX
     store s0, 0E
     load s0, ascii_ETX
     store s0, 0F
     load s0, ascii_ETX
     store s0, 10
     load s0, ascii_ETX
     store s0, 11
     load s0, ascii_ETX
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 66
     jump begin_print


select_line_record:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_S
     store s0, 03
     load s0, ascii_e
     store s0, 04
     load s0, ascii_l
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_c
     store s0, 07
     load s0, ascii_t
     store s0, 08
     load s0, ascii_SPACE
     store s0, 09
     load s0, ascii_a
     store s0, 0A
     load s0, ascii_n
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_O
     store s0, 0D
     load s0, ascii_p
     store s0, 0E
     load s0, ascii_t
     store s0, 0F
     load s0, ascii_i
     store s0, 10
     load s0, ascii_o
     store s0, 11
     load s0, ascii_n
     store s0, 12
     load s0, ascii_COLON
     store s0, 13
     load s0, ascii_SPACE
     store s0, 14
     load s4, ascii_1
     store s4, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 67 ;begin_record
     jump begin_print

;----------------------------------------------------------------------
;SELCTION BIT UTILITIES RECORD
begin_record:
	  load sF, sF
	  input s6, select_button
	  compare s6, 01
	  jump z, begin_record
	  jump selection_record
	
selection_record:
	  load sF, sF
	  input s2, up_button
	  input s5, down_button
	  input s6, select_button
	  compare s2, 01
	  jump z, go_up_record
	  compare s5, 01
	  jump z, go_down_record
	  compare s6, 01
	  jump z, option_select_record
	  jump selection_record
	
 go_up_record:
	 load sF, sF
	 fetch sE, 20
 	 output sE, uart_data_tx
 	 add s4, 01
 	 compare s4, 37
 	 jump z, fix_high_record
 	 output s4, uart_data_tx
 	 load s2, 00
 	 jump waste_time_record
 	
 go_down_record:
	 load sF, sF
	 fetch sE, 20
	 output sE, uart_data_tx
	 sub s4, 01
	 compare s4, 30
	 jump z, fix_low_record
	 output s4, uart_data_tx
	 load s5, 00
	 jump waste_time_record
 	
fix_high_record:
     load sF, sF
	 sub s4, 01
	 output s4, uart_data_tx
	 jump waste_time_record

fix_low_record:
    load sF, sF
	add s4, 01
	output s4, uart_data_tx
	jump waste_time_record

option_select_record:
	load sF, sF
	load s8, 31
	compare s4, 31
	jump z, goto_track1
	load s8, 32
	compare s4, 32
	jump z, goto_track2
	load s8, 33
	compare s4, 33
	jump z, goto_track3
	load s8, 34
	compare s4, 34
	jump z, goto_track4
	load s8, 35
	compare s4, 35
	jump z, goto_track5
	compare s4, 36
	jump z, record_back_to_main

record_back_to_main:
	jump first_menu
	
goto_track1:
	load sC, 01
	jump curr_record_line_p1

goto_track2:
	load sC, 02
	jump curr_record_line_p1
	
goto_track3:
	load sC, 03
	jump curr_record_line_p1
	
goto_track4:
	load sC, 04
	jump curr_record_line_p1
	
goto_track5:
	load sC, 05
	jump curr_record_line_p1
	
waste_time_record:
	load sF, sF
	input s2, up_button
	compare s2, 01
	jump z, waste_time_record
	input s5, down_button
	compare s5, 01
	jump z, waste_time_record
	jump selection_record
;END OF UTILITIES RECORD
;----------------------------------------------------------------------

curr_record_line_p1:
     load s0, ascii_FF
     store s0, 00
     load s0, ascii_R
     store s0, 01
     load s0, ascii_e
     store s0, 02
     load s0, ascii_c
     store s0, 03
     load s0, ascii_o
     store s0, 04
     load s0, ascii_r
     store s0, 05
     load s0, ascii_d
     store s0, 06
     load s0, ascii_i
     store s0, 07
     load s0, ascii_n
     store s0, 08
     load s0, ascii_g
     store s0, 09
     load s0, ascii_SPACE
     store s0, 0A
     load s0, ascii_T
     store s0, 0B
     load s0, ascii_r
     store s0, 0C
     load s0, ascii_a
     store s0, 0D
     load s0, ascii_c
     store s0, 0E
     load s0, ascii_k
     store s0, 0F
     load s0, ascii_SPACE
     store s0, 10
     load s0, s8
     store s0, 11
     load s0, ascii_COLON
     store s0, 12
     load s0, ascii_CR
     store s0, 13
     load s0, ascii_LF
     store s0, 14
     load s0, ascii_LF
     store s0, 15
     load s0, ascii_1
     store s0, 16
     load s0, ascii_RPAREN
     store s0, 17
     load sD, 7D
     jump begin_print

curr_record_line_p2:
     load s0, ascii_SPACE
     store s0, 00
     load s0, ascii_S
     store s0, 01
     load s0, ascii_t
     store s0, 02
     load s0, ascii_a
     store s0, 03
     load s0, ascii_r
     store s0, 04
     load s0, ascii_t
     store s0, 05
     load s0, ascii_CR
     store s0, 06
     load s0, ascii_LF
     store s0, 07
     load s0, ascii_2
     store s0, 08
     load s0, ascii_RPAREN
     store s0, 09
     load s0, ascii_SPACE
     store s0, 0A
     load s0, ascii_S
     store s0, 0B
     load s0, ascii_t
     store s0, 0C
     load s0, ascii_o
     store s0, 0D
     load s0, ascii_p
     store s0, 0E
     load s0, ascii_CR
     store s0, 0F
     load s0, ascii_LF
     store s0, 10
     load s0, ascii_3
     store s0, 11
     load s0, ascii_RPAREN
     store s0, 12
     load s0, ascii_SPACE
     store s0, 13
     load s0, ascii_D
     store s0, 14
     load s0, ascii_o
     store s0, 15
     load s0, ascii_n
     store s0, 16
     load s0, ascii_e
     store s0, 17
     load sD, 7E
     jump begin_print

curr_record_line_p3:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_S
     store s0, 03
     load s0, ascii_e
     store s0, 04
     load s0, ascii_l
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_c
     store s0, 07
     load s0, ascii_t
     store s0, 08
     load s0, ascii_SPACE
     store s0, 09
     load s0, ascii_a
     store s0, 0A
     load s0, ascii_n
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_O
     store s0, 0D
     load s0, ascii_p
     store s0, 0E
     load s0, ascii_t
     store s0, 0F
     load s0, ascii_i
     store s0, 10
     load s0, ascii_o
     store s0, 11
     load s0, ascii_n
     store s0, 12
     load s0, ascii_COLON
     store s0, 13
     load s0, ascii_SPACE
     store s0, 14
	 load s4, ascii_1
	 store s4, 15
	 load s0, ascii_ETX
	 store s0, 16
	 load s0, ascii_ETX
	 store s0, 17
	 load sD, 7F ;begin_curr_record
	 jump begin_print

;----------------------------------------------------------------------
;SELECTION BIT UTILITIES CURRENT RECORD
begin_curr_record:
	  load sF, sF
	  input s6, select_button
	  compare s6, 01
	  jump z, begin_curr_record
	  jump selection_curr_record
	
selection_curr_record:
	  load sF, sF
	  input s2, up_button
	  input s5, down_button
	  input s6, select_button
	  compare s2, 01
	  jump z, go_up_curr_record
	  compare s5, 01
	  jump z, go_down_curr_record
	  compare s6, 01
	  jump z, option_select_curr_record
	  jump selection_curr_record
	
 go_up_curr_record:
	 load sF, sF
	 fetch sE, 20
 	 output sE, uart_data_tx
 	 add s4, 01
 	 compare s4, 34
 	 jump z, fix_high_curr_record
 	 output s4, uart_data_tx
 	 load s2, 00
 	 jump waste_time_curr_record
 	
 go_down_curr_record:
	 load sF, sF
	 fetch sE, 20
	 output sE, uart_data_tx
	 sub s4, 01
	 compare s4, 30
	 jump z, fix_low_curr_record
	 output s4, uart_data_tx
	 load s5, 00
	 jump waste_time_curr_record
 	
fix_high_curr_record:
     load sF, sF
	 sub s4, 01
	 output s4, uart_data_tx
	 jump waste_time_curr_record

fix_low_curr_record:
    load sF, sF
	add s4, 01
	output s4, uart_data_tx
	jump waste_time_curr_record

option_select_curr_record:
	load sF, sF
	compare s4, 31
	jump z, start_record_t
	compare s4, 32
	jump z, stop_record
	compare s4, 33
	jump z, done_record

start_record_t:
	compare sC, 01
	jump z, rec_track1
	compare sC, 02
	jump z, rec_track2
	compare sC, 03
	jump z, rec_track3
	compare sC, 04
	jump z, rec_track4
	compare sC, 05
	jump z, rec_track5
	
rec_track1:
	load sA, 01
	output sA, FSM
	jump begin_curr_record
	
rec_track2:
	load sA, 09
	output sA, FSM
	jump begin_curr_record
	
rec_track3:
	load sA, 0A
	output sA, FSM
	jump begin_curr_record
	
rec_track4:
	load sA, 0B
	output sA, FSM
	jump begin_curr_record
	
rec_track5:
	load sA, 0C
	output sA, FSM
	jump begin_curr_record
	
stop_record:
	load sA, FF
	output sA, FSM
    jump begin_curr_record

done_record:
    load sA, FF
	output sA, FSM
	jump record_first_line
	
waste_time_curr_record:
	load sF, sF
	input s2, up_button
	compare s2, 01
	jump z, waste_time_curr_record
	input s5, down_button
	compare s5, 01
	jump z, waste_time_curr_record
	jump selection_curr_record
;END OF UTILITIES CURRENT RECORD
;----------------------------------------------------------------------

delete_first_line:
     load s0, ascii_FF
     store s0, 00
     load s0, ascii_D
     store s0, 01
     load s0, ascii_e
     store s0, 02
     load s0, ascii_l
     store s0, 03
     load s0, ascii_e
     store s0, 04
     load s0, ascii_t
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_SPACE
     store s0, 07
     load s0, ascii_W
     store s0, 08
     load s0, ascii_h
     store s0, 09
     load s0, ascii_i
     store s0, 0A
     load s0, ascii_c
     store s0, 0B
     load s0, ascii_h
     store s0, 0C
     load s0, ascii_SPACE
     store s0, 0D
     load s0, ascii_T
     store s0, 0E
     load s0, ascii_r
     store s0, 0F
     load s0, ascii_a
     store s0, 10
     load s0, ascii_c
     store s0, 11
     load s0, ascii_k
     store s0, 12
     load s0, ascii_COLON
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 69
     jump begin_print

delete_track1_line:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_1
     store s0, 03
     load s0, ascii_RPAREN
     store s0, 04
     load s0, ascii_SPACE
     store s0, 05
     load s0, ascii_T
     store s0, 06
     load s0, ascii_r
     store s0, 07
     load s0, ascii_a
     store s0, 08
     load s0, ascii_c
     store s0, 09
     load s0, ascii_k
     store s0, 0A
     load s0, ascii_SPACE
     store s0, 0B
     load s0, ascii_1
     store s0, 0C
     load s0, ascii_ETX
     store s0, 0D
     load s0, ascii_ETX
     store s0, 0E
     load s0, ascii_ETX
     store s0, 0F
     load s0, ascii_ETX
     store s0, 10
     load s0, ascii_ETX
     store s0, 11
     load s0, ascii_ETX
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 6A
     jump begin_print

delete_track23_line:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_2
     store s0, 02
     load s0, ascii_RPAREN
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_T
     store s0, 05
     load s0, ascii_r
     store s0, 06
     load s0, ascii_a
     store s0, 07
     load s0, ascii_c
     store s0, 08
     load s0, ascii_k
     store s0, 09
     load s0, ascii_SPACE
     store s0, 0A
     load s0, ascii_2
     store s0, 0B
     load s0, ascii_CR
     store s0, 0C
     load s0, ascii_LF
     store s0, 0D
     load s0, ascii_3
     store s0, 0E
     load s0, ascii_RPAREN
     store s0, 0F
     load s0, ascii_SPACE
     store s0, 10
     load s0, ascii_T
     store s0, 11
     load s0, ascii_r
     store s0, 12
     load s0, ascii_a
     store s0, 13
     load s0, ascii_c
     store s0, 14
     load s0, ascii_k
     store s0, 15
     load s0, ascii_SPACE
     store s0, 16
     load s0, ascii_3
     store s0, 17
     load sD, 6B
     jump begin_print

delete_track45_line:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_4
     store s0, 02
     load s0, ascii_RPAREN
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_T
     store s0, 05
     load s0, ascii_r
     store s0, 06
     load s0, ascii_a
     store s0, 07
     load s0, ascii_c
     store s0, 08
     load s0, ascii_k
     store s0, 09
     load s0, ascii_SPACE
     store s0, 0A
     load s0, ascii_4
     store s0, 0B
     load s0, ascii_CR
     store s0, 0C
     load s0, ascii_LF
     store s0, 0D
     load s0, ascii_5
     store s0, 0E
     load s0, ascii_RPAREN
     store s0, 0F
     load s0, ascii_SPACE
     store s0, 10
     load s0, ascii_T
     store s0, 11
     load s0, ascii_r
     store s0, 12
     load s0, ascii_a
     store s0, 13
     load s0, ascii_c
     store s0, 14
     load s0, ascii_k
     store s0, 15
     load s0, ascii_SPACE
     store s0, 16
     load s0, ascii_5
     store s0, 17
     load sD, 6C
     jump begin_print

delete_go_back_line:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_6
     store s0, 02
     load s0, ascii_RPAREN
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_G
     store s0, 05
     load s0, ascii_o
     store s0, 06
     load s0, ascii_SPACE
     store s0, 07
     load s0, ascii_B
     store s0, 08
     load s0, ascii_a
     store s0, 09
     load s0, ascii_c
     store s0, 0A
     load s0, ascii_k
     store s0, 0B
     load s0, ascii_ETX
     store s0, 0C
     load s0, ascii_ETX
     store s0, 0D
     load s0, ascii_ETX
     store s0, 0E
     load s0, ascii_ETX
     store s0, 0F
     load s0, ascii_ETX
     store s0, 10
     load s0, ascii_ETX
     store s0, 11
     load s0, ascii_ETX
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 6D
     jump begin_print

select_line_delete:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_S
     store s0, 03
     load s0, ascii_e
     store s0, 04
     load s0, ascii_l
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_c
     store s0, 07
     load s0, ascii_t
     store s0, 08
     load s0, ascii_SPACE
     store s0, 09
     load s0, ascii_a
     store s0, 0A
     load s0, ascii_n
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_O
     store s0, 0D
     load s0, ascii_p
     store s0, 0E
     load s0, ascii_t
     store s0, 0F
     load s0, ascii_i
     store s0, 10
     load s0, ascii_o
     store s0, 11
     load s0, ascii_n
     store s0, 12
     load s0, ascii_COLON
     store s0, 13
     load s0, ascii_SPACE
     store s0, 14
	 load s4, ascii_1
	 store s4, 15
	 load s0, ascii_ETX
	 store s0, 16
	 load s0, ascii_ETX
	 store s0, 17
	 load sD, 6E ;begin_delete
	 jump begin_print

track_deleted_p1:
     load s0, ascii_FF
     store s0, 00
     load s0, ascii_M
     store s0, 01
     load s0, ascii_e
     store s0, 02
     load s0, ascii_s
     store s0, 03
     load s0, ascii_s
     store s0, 04
     load s0, ascii_a
     store s0, 05
     load s0, ascii_g
     store s0, 06
     load s0, ascii_e
     store s0, 07
     load s0, ascii_SPACE
     store s0, 08
     load s0, ascii_W
     store s0, 09
     load s0, ascii_a
     store s0, 0A
     load s0, ascii_s
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_D
     store s0, 0D
     load s0, ascii_e
     store s0, 0E
     load s0, ascii_l
     store s0, 0F
     load s0, ascii_e
     store s0, 10
     load s0, ascii_t
     store s0, 11
     load s0, ascii_e
     store s0, 12
     load s0, ascii_d
     store s0, 13
     load s0, ascii_CR
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 74
     jump begin_print

track_deleted_p2:
     load s0, ascii_LF
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_1
     store s0, 02
     load s0, ascii_RPAREN
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_G
     store s0, 05
     load s0, ascii_o
     store s0, 06
     load s0, ascii_SPACE
     store s0, 07
     load s0, ascii_B
     store s0, 08
     load s0, ascii_a
     store s0, 09
     load s0, ascii_c
     store s0, 0A
     load s0, ascii_k
     store s0, 0B
     load s0, ascii_ETX
     store s0, 0C
     load s0, ascii_ETX
     store s0, 0D
     load s0, ascii_ETX
     store s0, 0E
     load s0, ascii_ETX
     store s0, 0F
     load s0, ascii_ETX
     store s0, 10
     load s0, ascii_ETX
     store s0, 11
     load s0, ascii_ETX
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 75
     jump begin_print

track_deleted_p3:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_S
     store s0, 03
     load s0, ascii_e
     store s0, 04
     load s0, ascii_l
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_c
     store s0, 07
     load s0, ascii_t
     store s0, 08
     load s0, ascii_SPACE
     store s0, 09
     load s0, ascii_a
     store s0, 0A
     load s0, ascii_n
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_O
     store s0, 0D
     load s0, ascii_p
     store s0, 0E
     load s0, ascii_t
     store s0, 0F
     load s0, ascii_i
     store s0, 10
     load s0, ascii_o
     store s0, 11
     load s0, ascii_n
     store s0, 12
     load s0, ascii_COLON
     store s0, 13
     load s0, ascii_SPACE
     store s0, 14
	 load s4, ascii_1
	 store s4, 15
	 load s0, ascii_ETX
	 store s0, 16
	 load s0, ascii_ETX
	 store s0, 17
	 load sD, 76 ;begin_delete
	 jump begin_print
	
;----------------------------------------------------------------------
;SELECTION BIT UTILITIES DELETE
begin_delete:
	  load sF, sF
	  input s6, select_button
	  compare s6, 01
	  jump z, begin_delete
      jump selection_delete
	
selection_delete:
	  load sF, sF
	  input s2, up_button
	  input s5, down_button
	  input s6, select_button
	  compare s2, 01
	  jump z, go_up_delete
	  compare s5, 01
	  jump z, go_down_delete
	  compare s6, 01
	  jump z, option_select_delete
	  jump selection_delete
	
 go_up_delete:
	 load sF, sF
	 fetch sE, 20
 	 output sE, uart_data_tx
 	 add s4, 01
 	 compare s4, 37
 	 jump z, fix_high_delete
 	 output s4, uart_data_tx
 	 load s2, 00
 	 jump waste_time_delete
 	
 go_down_delete:
	 load sF, sF
	 fetch sE, 20
	 output sE, uart_data_tx
	 sub s4, 01
	 compare s4, 30
	 jump z, fix_low_delete
	 output s4, uart_data_tx
	 load s5, 00
	 jump waste_time_delete
 	
fix_high_delete:
     load sF, sF
	 sub s4, 01
	 output s4, uart_data_tx
	 jump waste_time_delete

fix_low_delete:
    load sF, sF
	add s4, 01
	output s4, uart_data_tx
	jump waste_time_delete

option_select_delete:
	load sF, sF
	compare s4, 31
	jump z, delete_1
	compare s4, 32
	jump z, delete_2
	compare s4, 33
	jump z, delete_3
	compare s4, 34
	jump z, delete_4
	compare s4, 35
	jump z, delete_5
	compare s4, 36
	jump z, first_menu
	
	
delete_1:
	load sA, 0D
	output sA, FSM
	jump post_1
post_1:
	load sF, sF
	input sB, mem_wipe
	compare sB, 01
	jump z, track_deleted_p1
	jump post_1

delete_2:
	load sA, 0E
	output sA, FSM
	jump post_2
post_2:
	load sF, sF
	input sB, mem_wipe
	compare sB, 01
	jump z, track_deleted_p1
	jump post_2
	
delete_3:
	load sA, 0F
	output sA, FSM
	jump post_3
post_3:
	load sF, sF
	input sB, mem_wipe
	compare sB, 01
	jump z, track_deleted_p1
	jump post_3
	
delete_4:
	load sA, 10
	output sA, FSM
	jump post_4
post_4:
	load sF, sF
	input sB, mem_wipe
	compare sB, 01
	jump z, track_deleted_p1
	jump post_4
	
delete_5:
	load sA, 11
	output sA, FSM
	jump post_5
post_5:
	load sF, sF
	input sB, mem_wipe
	compare sB, 01
	jump z, track_deleted_p1
	jump post_5
	
wait_for_user:  ;-------------76------------
	load sF, sF
	input s6, select_button
	compare s6, 01
	jump z, wait_for_user
	jump wait_for_user_p2
	
wait_for_user_p2:
    load sF, sF
	input s6, select_button
	compare s6, 01
	jump z, delete_first_line
	jump wait_for_user_p2

waste_time_delete:
	load sF, sF
	input s2, up_button
	compare s2, 01
	jump z, waste_time_delete
	input s5, down_button
	compare s5, 01
	jump z, waste_time_delete
	jump selection_delete
;END OF UTILITIES DELETE
;----------------------------------------------------------------------

delete_all_first_line:
     load s0, ascii_FF
     store s0, 00
     load s0, ascii_A
     store s0, 01
     load s0, ascii_l
     store s0, 02
     load s0, ascii_l
     store s0, 03
     load s0, ascii_SPACE
     store s0, 04
     load s0, ascii_M
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_s
     store s0, 07
     load s0, ascii_s
     store s0, 08
     load s0, ascii_a
     store s0, 09
     load s0, ascii_g
     store s0, 0A
     load s0, ascii_e
     store s0, 0B
     load s0, ascii_s
     store s0, 0C
     load s0, ascii_SPACE
     store s0, 0D
     load s0, ascii_A
     store s0, 0E
     load s0, ascii_r
     store s0, 0F
     load s0, ascii_e
     store s0, 10
     load s0, ascii_SPACE
     store s0, 11
     load s0, ascii_D
     store s0, 12
     load s0, ascii_e
     store s0, 13
     load s0, ascii_l
     store s0, 14
     load s0, ascii_e
     store s0, 15
     load s0, ascii_t
     store s0, 16
     load s0, ascii_e
     store s0, 17
     load sD, 70
     jump begin_print

delete_all_go_back_line:
     load s0, ascii_d
     store s0, 00
     load s0, ascii_CR
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_LF
     store s0, 03
     load s0, ascii_1
     store s0, 04
     load s0, ascii_RPAREN
     store s0, 05
     load s0, ascii_SPACE
     store s0, 06
     load s0, ascii_G
     store s0, 07
     load s0, ascii_o
     store s0, 08
     load s0, ascii_SPACE
     store s0, 09
     load s0, ascii_B
     store s0, 0A
     load s0, ascii_a
     store s0, 0B
     load s0, ascii_c
     store s0, 0C
     load s0, ascii_k
     store s0, 0D
     load s0, ascii_ETX
     store s0, 0E
     load s0, ascii_ETX
     store s0, 0F
     load s0, ascii_ETX
     store s0, 10
     load s0, ascii_ETX
     store s0, 11
     load s0, ascii_ETX
     store s0, 12
     load s0, ascii_ETX
     store s0, 13
     load s0, ascii_ETX
     store s0, 14
     load s0, ascii_ETX
     store s0, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 71
     jump begin_print

select_line_delete_all:
     load s0, ascii_CR
     store s0, 00
     load s0, ascii_LF
     store s0, 01
     load s0, ascii_LF
     store s0, 02
     load s0, ascii_S
     store s0, 03
     load s0, ascii_e
     store s0, 04
     load s0, ascii_l
     store s0, 05
     load s0, ascii_e
     store s0, 06
     load s0, ascii_c
     store s0, 07
     load s0, ascii_t
     store s0, 08
     load s0, ascii_SPACE
     store s0, 09
     load s0, ascii_a
     store s0, 0A
     load s0, ascii_n
     store s0, 0B
     load s0, ascii_SPACE
     store s0, 0C
     load s0, ascii_O
     store s0, 0D
     load s0, ascii_p
     store s0, 0E
     load s0, ascii_t
     store s0, 0F
     load s0, ascii_i
     store s0, 10
     load s0, ascii_o
     store s0, 11
     load s0, ascii_n
     store s0, 12
     load s0, ascii_COLON
     store s0, 13
     load s0, ascii_SPACE
     store s0, 14
     load s4, ascii_1
     store s4, 15
     load s0, ascii_ETX
     store s0, 16
     load s0, ascii_ETX
     store s0, 17
     load sD, 72 ;begin_delete_all
     jump begin_print

;----------------------------------------------------------------------
;SELECTION BIT UTILITIES DELETE ALL MESSAGES
begin_delete_all:
	  load sF, sF
	  input s6, select_button
	  compare s6, 01
	  jump z, begin_delete_all
	  jump selection_delete_all
	
selection_delete_all:
	  load sF, sF
	  input s2, up_button
	  input s5, down_button
	  input s6, select_button
	  compare s2, 01
	  jump z, go_up_delete_all
	  compare s5, 01
	  jump z, go_down_delete_all
	  compare s6, 01
	  jump z, option_select_delete_all
	  jump selection_delete_all
	
 go_up_delete_all:
	 load sF, sF
	 fetch sE, 20
 	 output sE, uart_data_tx
 	 add s4, 01
 	 compare s4, 32
 	 jump z, fix_high_delete_all
 	 output s4, uart_data_tx
 	 load s2, 00
 	 jump waste_time_delete_all
 	
 go_down_delete_all:
	 load sF, sF
	 fetch sE, 20
	 output sE, uart_data_tx
	 sub s4, 01
	 compare s4, 30
	 jump z, fix_low_delete_all
	 output s4, uart_data_tx
	 load s5, 00
	 jump waste_time_delete_all
 	
fix_high_delete_all:
     load sF, sF
	 sub s4, 01
	 output s4, uart_data_tx
	 jump waste_time_delete_all

fix_low_delete_all:
    load sF, sF
	add s4, 01
	output s4, uart_data_tx
	jump waste_time_delete_all

option_select_delete_all:
	load sF, sF
	compare s4, 31
	jump z, back_to_main
	
back_to_main:
	jump first_menu

waste_time_delete_all:
	load sF, sF
	input s2, up_button
	compare s2, 01
	jump z, waste_time_delete_all
	input s5, down_button
	compare s5, 01
	jump z, waste_time_delete_all
	jump selection_delete_all
;END OF UTILITIES DELETE ALL MESSAGES
;----------------------------------------------------------------------





;----------------------------------------------------------------------
;BEGIN PRINTING LINE OF CODE
begin_print:
	  xor s0, s0

next_letter:
	  load sF, sF
	  input s3, buffer_full    ;Check if buffer is full
	  compare s3, 01
	  jump z, buffer_full_call
	  fetch s1, (s0)
	  add s0, 01
	
ready_buffer:
	  output s1, uart_data_tx
	  compare s0, 18
	  jump nz, next_letter
	
return_statement:
	  load sF, sF
	  compare sD, 50
	  jump z, first_menu
	  compare sD, 51
	  jump z, second_menu
	  compare sD, 52
	  jump z, third_menu
	  compare sD, 53
	  jump z, fourth_menu
	  compare sD, 54
	  jump z, fifth_menu
	  compare sD, 55
	  jump z, select_line_main_menu
	  compare sD, 56
	  jump z, begin_main_menu
	  compare sD, 57
	  jump z, volume_control
	  compare sD, 58
	  jump z, select_line_volume_control
	  compare sD, 59
	  jump z, begin_volume_control
	  compare sD, 5A
	  jump z, play_first_line
	  compare sD, 5B
	  jump z, play_track12_line
	  compare sD, 5C
	  jump z, play_track34_line
	  compare sD, 5D
	  jump z, play_track5_line
	  compare sD, 5F
	  jump z, select_line_play
	  compare sD, 60
	  jump z, begin_play
	  compare sD, 61
	  jump z, record_first_line
	  compare sD, 62
	  jump z, record_track1_line
	  compare sD, 63
	  jump z, record_track23_line
	  compare sD, 64
	  jump z, record_track45_line
	  compare sD, 65
	  jump z, record_go_back_line
	  compare sD, 66
	  jump z, select_line_record
	  compare sD, 67
	  jump z, begin_record
	  compare sD, 68
	  jump z, delete_first_line
	  compare sD, 69
	  jump z, delete_track1_line
	  compare sD, 6A
	  jump z, delete_track23_line
	  compare sD, 6B
	  jump z, delete_track45_line
	  compare sD, 6C
	  jump z, delete_go_back_line
	  compare sD, 6D
	  jump z, select_line_delete
	  compare sD, 6E
	  jump z, begin_delete
	  compare sD, 6F
	  jump z, delete_all_first_line
	  compare sD, 70
	  jump z, delete_all_go_back_line
	  compare sD, 71
	  jump z, select_line_delete_all
	  compare sD, 72
	  jump z, begin_delete_all
	  compare sD, 73
	  jump z, track_deleted_p1
	  compare sD, 74
	  jump z, track_deleted_p2
	  compare sD, 75
	  jump z, track_deleted_p3
	  compare sD, 76
	  jump z, wait_for_user
	  compare sD, 77
	  jump z, curr_track_line_p1
	  compare sD, 78
	  jump z, curr_track_line_p2
	  compare sD, 79
	  jump z, curr_track_line_p3
	  compare sD, 7A
	  jump z, curr_track_line_p4
	  compare sD, 7B
	  jump z, begin_curr_track
	  compare sD, 7C
	  jump z, curr_record_line_p1
	  compare sD, 7D
	  jump z, curr_record_line_p2
	  compare sD, 7E
	  jump z, curr_record_line_p3
	  compare sD, 7F
	  jump z, begin_curr_record
	  compare sD, 80
	  jump z, pre_alt_start
	  compare sD, 81
	  jump z, mem_full_line_p1
	  compare sD, 82
	  jump z, mem_full_line_p2
	  compare sD, 83
	  jump z, begin_mem_full
	
	
	
buffer_full_call:
	  load sF, sF ;Delay
	  jump next_letter ;Continue inputting data into buffer
;END OF PRINTING
;----------------------------------------------------------------------



end_all: jump end_all

